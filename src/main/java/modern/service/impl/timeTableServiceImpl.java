package modern.service.impl;

import modern.exceptions.CouldNotDeleteRecordException;
import modern.exceptions.CouldNotUpdateRecordException;
import modern.exceptions.MissingRequiredFieldException;
import modern.exceptions.NoRecordFoundException;
import modern.io.dao.timeTableDAO;
import modern.service.attTableService;
import modern.service.semesterService;
import modern.service.timeTableService;
import modern.shared.dto.attTableDTO;
import modern.shared.dto.semesterDTO;
import modern.shared.dto.timeTableDTO;
import modern.ui.response.sys.ErrorMessages;
import modern.utils.EntityUtils;

import java.text.ParseException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;

public class timeTableServiceImpl implements timeTableService {
    timeTableDAO database;
    EntityUtils entityUtils = new EntityUtils();
    attTableService tableService;
    semesterService semesterService;
    semesterDTO semester;

    public timeTableServiceImpl(timeTableDAO database, attTableService tableService, modern.service.semesterService semesterService) {
        this.database = database;
        this.tableService = tableService;
        this.semesterService = semesterService;
    }

    @Override
    public timeTableDTO create(timeTableDTO record) throws ParseException {
        if (record.getCode() == null) {
            throw new MissingRequiredFieldException(ErrorMessages.MISSING_REQUIRED_FIELD.name() + "  collage Code is required");
        } else {
            timeTableDTO returnValue = null;
            // Check if user already exists
//            timeTableDTO existingRecord = this.getbyCode(record.getCode());
//            if (existingRecord != null) {
//                throw new CouldNotCreateRecordException(ErrorMessages.RECORD_ALREADY_EXISTS.getErrorMessage());
//            }

            String Id = entityUtils.generateEntityId(30);
            record.setId(Id);
            // Record data into a database
            returnValue = this.save(record);


            this.semester = this.semesterService.getbyId(record.getSemester().getId());
            ZoneId zone = ZoneId.of("Africa/Cairo");

            LocalDate semesterFromDate = this.semester.getFromDate().toInstant().atZone(zone).toLocalDate();
            LocalDate semesterToDate = this.semester.getToDate().toInstant().atZone(zone).toLocalDate();
            DayOfWeek dayOfWeek = record.getDayOfWeek();
            for (LocalDate date = semesterFromDate; date.isBefore(semesterToDate); date = date.plusDays(1)) {
                if (date.getDayOfWeek() == dayOfWeek) {
                    attTableDTO attTable = new attTableDTO();
                    Date attTableDate = Date.from(date.atStartOfDay(ZoneId.systemDefault()).toInstant());
                    attTable.setDate(attTableDate);
                    attTable.setSubject(record.getSubject());
                    attTable.setLocation(record.getLocation());
                    attTable.setDescription("automatic generated by timeTable: " + record.getCode());
                    attTable.setCode(record.getCode() + " timeTable " + date + "period :  " + record.getPeriod() + "length:  " + record.getLength());
                    attTable.setPeriod(record.getPeriod());
                    attTable.setLength(record.getLength());
                    this.tableService.create(attTable);
                }
            }


            // Return back the user profile
            return returnValue;
        }
    }

    @Override
    public timeTableDTO getbyId(String id) {
        timeTableDTO returnValue = null;
        try {
            this.database.openConnection();
            returnValue = this.database.getById(id);
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new NoRecordFoundException(ErrorMessages.NO_RECORD_FOUND.getErrorMessage());
        } finally {
            this.database.closeConnection();
        }
        return returnValue;
    }

    @Override
    public timeTableDTO getbyCode(String code) {
        timeTableDTO timeTableDTO = null;

        if (code == null || code.isEmpty()) {
            return timeTableDTO;
        }

        try {
            this.database.openConnection();
            timeTableDTO = this.database.getByCode(code);
        } finally {
            this.database.closeConnection();
        }

        return timeTableDTO;
    }

    @Override
    public List<timeTableDTO> getAll(int start, int limit) {
        List<timeTableDTO> timeTableDTOS = null;

        // Get users from database
        try {
            this.database.openConnection();
            timeTableDTOS = this.database.getAll(start, limit);
        } finally {
            this.database.closeConnection();
        }

        return timeTableDTOS;
    }

    @Override
    public void update(timeTableDTO record) {
        if (record.getId() == null) {
            throw new MissingRequiredFieldException(ErrorMessages.MISSING_REQUIRED_FIELD.name() + "location ID is required");
        } else {
            try {
                // Connect to database
                this.database.openConnection();
                // Update User Details
                this.database.updateOne(record);
                this.semester = this.semesterService.getbyId(record.getSemester().getId());
                ZoneId zone = ZoneId.of("Africa/Cairo");

                LocalDate semesterFromDate = this.semester.getFromDate().toInstant().atZone(zone).toLocalDate();
                LocalDate semesterToDate = this.semester.getToDate().toInstant().atZone(zone).toLocalDate();
                DayOfWeek dayOfWeek = record.getDayOfWeek();
                for (LocalDate date = semesterFromDate; date.isBefore(semesterToDate); date = date.plusDays(1)) {
                    if (date.getDayOfWeek() == dayOfWeek) {
                        attTableDTO attTable = new attTableDTO();
                        Date attTableDate = Date.from(date.atStartOfDay(ZoneId.systemDefault()).toInstant());
                        attTable.setDate(attTableDate);
                        attTable.setSubject(record.getSubject());
                        attTable.setLocation(record.getLocation());
                        attTable.setDescription("automatic generated by timeTable: " + record.getCode());
                        attTable.setCode(record.getCode() + " timeTable " + date + "period :  " + record.getPeriod() + "length:  " + record.getLength());
                        attTable.setPeriod(record.getPeriod());
                        attTable.setLength(record.getLength());
                        this.tableService.update(attTable);
                    }
                }

            } catch (Exception ex) {
                throw new CouldNotUpdateRecordException(ex.getMessage());
            } finally {
                this.database.closeConnection();
            }
        }
    }

    @Override
    public void delete(timeTableDTO record) {
        try {
            this.database.openConnection();
            this.database.deleteOne(record);
            this.semester = this.semesterService.getbyId(record.getSemester().getId());
            ZoneId zone = ZoneId.of("Africa/Cairo");

            LocalDate semesterFromDate = this.semester.getFromDate().toInstant().atZone(zone).toLocalDate();
            LocalDate semesterToDate = this.semester.getToDate().toInstant().atZone(zone).toLocalDate();
            DayOfWeek dayOfWeek = record.getDayOfWeek();
            for (LocalDate date = semesterFromDate; date.isBefore(semesterToDate); date = date.plusDays(1)) {
                if (date.getDayOfWeek() == dayOfWeek) {
                    attTableDTO attTable = new attTableDTO();
                    Date attTableDate = Date.from(date.atStartOfDay(ZoneId.systemDefault()).toInstant());
                    attTable.setDate(attTableDate);
                    attTable.setSubject(record.getSubject());
                    attTable.setLocation(record.getLocation());
                    attTable.setDescription("automatic generated by timeTable: " + record.getCode());
                    attTable.setCode(record.getCode() + " timeTable " + date + "period :  " + record.getPeriod() + "length:  " + record.getLength());
                    attTable.setPeriod(record.getPeriod());
                    attTable.setLength(record.getLength());
                    this.tableService.delete(attTable);
                }
            }
        } catch (Exception ex) {
            throw new CouldNotDeleteRecordException(ex.getMessage());
        } finally {
            this.database.closeConnection();
        }

        // Verify that user is deleted
        try {
            record = getbyId(record.getId());
        } catch (NoRecordFoundException ex) {
            record = null;
        }

        if (record != null) {
            throw new CouldNotDeleteRecordException(
                    ErrorMessages.COULD_NOT_DELETE_RECORD.getErrorMessage());
        }
    }

    @Override
    public timeTableDTO save(timeTableDTO record) {
        timeTableDTO returnValue = null;
        // Connect to database
        try {
            this.database.openConnection();
            returnValue = this.database.saveOne(record);
        } finally {
            this.database.closeConnection();
        }

        return returnValue;
    }
}
